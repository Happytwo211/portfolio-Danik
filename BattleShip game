import random


class Grittings:
    print("------------------------------------")
    print("Hello, welcome to the naval battle!")
    print("------------------------------------")

class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __repr__(self):
        return f"Dot({self.x}, {self.y})"

class Ship:
    def __init__(self, ship_nose, size, orientation):
        self.ship_nose = ship_nose
        self.size = size
        self.orientation = orientation
        self.life = size
        self.dots = []
        for i in range(self.size):
            ix = self.ship_nose.x
            iy = self.ship_nose.y
        if orientation == 1:
            ix += i
        if orientation == 0:
            iy += i
        self.dots.append(Ship(ix,iy))

    @property
    def dots(self):
        return self.docs


class Errors(Exception):
    pass
class HitOverBoard(Errors):
    def __str__(self):
        return "You cant shoot outside the Board"
class RepeatHit(Errors):
    def __str__(self):
        return "You have already hit this coordinates"
class ShipWrongPlaced(Errors):
    pass


class Board:
    def __init__(self, size = 6 , hide_board = False):
        self.size = size
        self.hide_board = hide_board
        self.count_destroy_ship = 0
        self.field = [["0"]*size for _ in range(size)]
        self.busy_dots = []
        self.ships = []
    def AddShip(self, ship):
        for i in ship.dots:
            if self.out(i) or i in self.busy_dots:
                raise RepeatHit()
        for i in ship.dots:
            self.field[i.x][i.y] = "■"
            self.busy_dots.append(i)

        self.ships.append(ship)
        self.contour_ship(ship)

    def countour(self, ship, show = False):
        dot_countour = [
    (-1, 1), (-1, 0), (-1, 1),
    (0, -1), (0, 0), (0, 1),
    (1,-1), (1, 0), (1, 1)
    ]
        for i in ship.dots:
            for ix, iy in dot_countour:
                countr = Dot(i.x + ix, i.y + iy)
                if not(self.out(countr) and countr not in self.busy_dots):
                    if show:
                        self.field[countr.x][countr.y]
                    self.busy_dots.append(countr)
    def  __str__(self):
        res = " "
        res += "   | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            res += f"\n{i+1} | " + " | " .join(row) + " | "

        if self.hide_board:
            res = res.replace("■", "0")
        return res

    def out_of_the_board(self, i):
        return not(0 <= i.x <= self.size) and (0 <= i.y <= self.size)

    def shoot(self, dot):
        if self.out(i):
            raise HitOverBoard()
        if i in busy_dots:
            raise RepeatHit()
        self.busy_dots.append(i)
        for ship in self.ships:
            if i in ship.dots:
                ship.life = - 1
                self.contour_ship(ship, show = True)
                print("I destroyed the ship")
            else:
                print("You hit the ship")
                return True
        self.field[i.x][i.y] = "."
        print("You missed!")
        return False

class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        pass

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except HitOverBoard as h:
                print(h)

class AI(Player):
    def ask(self):
        d = Dot(random.randint(0,5 ), random.randint(0, 5))
        return f"AI move:{d.x + 1},{d.y +1}"

class User(Player):
        def ask(self):
            while True:
                cors = input("enter cords").split()
                if len(cors) != 2:
                    print("enter 2 cords")
                    continue
                x , y = cords

                if not(x.isdigit()) or not(y.isdigit()):
                    print("enter nums")
                    continue
                x, y =  int

                return Dot(x-1, y-1)

class Game:
    def __init__(self, size = 6 ):
        self.size = size
        player = self.random_board()
        comp = self.random_board()
        comp.hide_board = True

        self.user = User(player, comp)
        self.AI = AI(comp,player)
    def random_board(self):
        board = None
        while board is None:
            lens = [3,2,2,1,1,1]
            board = Board(size=self.size)
            attemps = 0
            for i in lens:
                while True:
                    attemps += 1
                    if attemps > 2000:
                        return None
                    ship = Ship(Dot(random.randint(0, self.size)),random.randint(0, self.size), randint(0 ,1) )
                    try:
                        board.add_ship(ship)
                        break
                    except ShipWrongPlaced:
                        pass

    def greet(self):
        print("-------------------")
        print("  Приветсвуем вас  ")
        print("      в игре       ")
        print("    морской бой    ")
        print("-------------------")
        print(" формат ввода: x y ")
        print(" x - номер строки  ")
        print(" y - номер столбца ")

    def loop(self):
        num = 0
        while True:
            print("-" * 20)
            print("Доска пользователя:")
            print(self.us.board)
            print("-" * 20)
            print("Доска компьютера:")
            print(self.ai.board)
            print("-" * 20)
            if num % 2 == 0:
                print("Ходит пользователь!")
                repeat = self.us.move()
            else:
                print("Ходит компьютер!")
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 7:
                print("-" * 20)
                print("Пользователь выиграл!")
                break

            if self.us.board.count == 7:
                print("-" * 20)
                print("Компьютер выиграл!")
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()




a=Game
a.start()
